{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js","testtoken.png"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","tokenSaleAddress","componentDidMount","alert","on","_chainId","location","reload","eth","getAccounts","accounts","net","getId","networkId","tokenInstance","Contract","MyToken","abi","networks","address","tokenSaleInstance","MyTokenSale","kycInstance","KycContract","methods","owner","call","name","tokenName","symbol","tokenSymbol","decimals","tokenDecimals","getBlockNumber","lastBlockNumber","totalSupply","rate","getChainId","chainId","getBalance","balance","KycCompleted","whitelisted","listenBlockNumber","handleAccountChange","setState","kycAddress","tokenAddress","blockNumber","updateUserTokens","listenToTokenTransfer","error","handleInputChange","event","target","value","type","checked","handleKycWhitelisting","utils","isAddress","setKycCompleted","send","from","balanceOf","userTokens","unsubscribeTokenTransfer","events","Transfer","to","subscription","unsubscribe","success","handleBuyTokens","amount","document","getElementById","buyTokens","toWei","toString","subscribe","result","number","handleClickAccount","navigator","clipboard","writeText","handlePrivateKey","container","priK","pubK","html","innerHTML","addTokenToMetamask","request","method","params","options","image","handleSetChain","this","className","href","onClick","src","logo","Math","round","substr","onChange","id","min","alt","Component","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4ca4a716.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\n\n// Web3 and Smart Contracts imports\nimport MyToken from \"./contracts/MyToken.json\";\nimport MyTokenSale from \"./contracts/MyTokenSale.json\";\nimport KycContract from \"./contracts/KycContract.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport logo from './testtoken.png';\nimport \"./App.css\";\nimport \"./Header.css\"; \n\n/*\nconst networks = {\n  rinkeby: {\n    chainId: `0x${Number(4).toString(16)}`,\n    chainName: \"Rinkeby\"\n    nativeCurrency: {\n\n    }\n  }\n}\n*/\n\nclass App extends Component {\n  \n  state = { loaded: false, tokenSaleAddress: null };\n\n  componentDidMount = async () => {\n    try {\n\n      if(!window.ethereum){\n        alert(\"Go to metamask.io and install metamask to use this DApp.\")\n      }\n\n      // https://docs.metamask.io/guide/ethereum-provider.html#events\n      window.ethereum.on('chainChanged', (_chainId) => window.location.reload());\n\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n      \n      this.tokenInstance = new this.web3.eth.Contract(\n        MyToken.abi,\n        MyToken.networks[this.networkId] && MyToken.networks[this.networkId].address,\n      );\n      \n      this.tokenSaleInstance = new this.web3.eth.Contract(\n        MyTokenSale.abi,\n        MyTokenSale.networks[this.networkId] && MyTokenSale.networks[this.networkId].address,\n      );\n\n      this.kycInstance = new this.web3.eth.Contract(\n        KycContract.abi,\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\n      );\n\n      const owner = await this.kycInstance.methods.owner().call()\n\n      const tokenName = await this.tokenInstance.methods.name().call()\n      const tokenSymbol = await this.tokenInstance.methods.symbol().call()\n      const tokenDecimals = await this.tokenInstance.methods.decimals().call()\n      const lastBlockNumber = await this.web3.eth.getBlockNumber()\n      const totalSupply = await this.tokenInstance.methods.totalSupply().call()\n      const rate = await this.tokenSaleInstance.methods.rate().call()\n      const chainId = await this.web3.eth.getChainId()\n      const accounts = await this.web3.eth.getAccounts()\n      const balance = await this.web3.eth.getBalance(accounts[0])\n      const whitelisted = await this.kycInstance.methods.KycCompleted(accounts[0]).call()\n      \n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n\n      this.listenBlockNumber();\n\n      window.ethereum.on('accountsChanged', () => this.handleAccountChange());\n\n      this.setState({\n        kycAddress: \"0x123..\", \n        tokenSaleAddress: MyTokenSale.networks[this.networkId].address,\n        tokenAddress: MyToken.networks[this.networkId].address,\n        owner: owner,\n        tokenName: tokenName,\n        tokenSymbol: tokenSymbol,\n        tokenDecimals: tokenDecimals, \n        blockNumber: lastBlockNumber,\n        totalSupply: totalSupply,\n        rate: rate,\n        chainId: chainId,\n        accounts: accounts,\n        balance: balance,\n        whitelisted: whitelisted,\n        loaded: true,\n      }, this.updateUserTokens );\n\n      this.listenToTokenTransfer();\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details. Try connecting to the correct network.`,\n      );\n      console.error(error);\n    }\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target\n    const value = target.type === \"checkbox\" ? target.checked : target.value\n    const name = target.name\n    this.setState({ [name]: value})\n  }\n\n  handleKycWhitelisting = async () => {\n    if(this.web3.utils.isAddress(this.state.kycAddress)) {\n      await this.kycInstance.methods.setKycCompleted(this.state.kycAddress).send({from: this.state.accounts[0]})\n      alert(\"Kyc for \" + this.state.kycAddress + \" completed\")\n    } else {\n      alert(\"Please input a valid address, \" + this.state.kycAddress + \" is not an address.\")\n    }    \n  }\n\n  updateUserTokens = async () => {\n    let userTokens = await this.tokenInstance.methods.balanceOf(this.state.accounts[0]).call()\n    const balance = await this.web3.eth.getBalance(this.state.accounts[0])\n    this.setState({userTokens: userTokens, balance: balance})\n  }\n\n  handleAccountChange = async () => {\n    const accounts = await this.web3.eth.getAccounts()\n    const whitelisted = await this.kycInstance.methods.KycCompleted(accounts[0]).call()\n    this.setState({accounts: accounts, whitelisted: whitelisted})\n    this.unsubscribeTokenTransfer()\n    this.listenToTokenTransfer()\n    this.updateUserTokens()\n  }\n\n  listenToTokenTransfer = async () => {\n    let subscription = await this.tokenInstance.events.Transfer({to: this.state.accounts[0]}).on(\"data\", this.updateUserTokens)\n    this.setState({subscription: subscription})\n  }\n\n  unsubscribeTokenTransfer = async () => {\n    await this.state.subscription.unsubscribe(function(error, success){\n      if(success) {\n        //console.log(\"unsubscribed\")\n      }\n    })\n\n  }\n\n  handleBuyTokens = async () => {\n    let amount = document.getElementById(\"weiAmount\").value\n    if(amount < 0) return alert(\"Value must be positive.\")\n    await this.tokenSaleInstance.methods.buyTokens(this.state.accounts[0]).send({from:this.state.accounts[0], value: this.web3.utils.toWei(amount.toString(),\"wei\")})\n    let totalSupply = await this.tokenInstance.methods.totalSupply().call()\n    this.setState({totalSupply: totalSupply})\n  }\n\n  // https://web3js.readthedocs.io/en/v1.2.11/web3-eth-subscribe.html\n  listenBlockNumber = async () => {\n    this.web3.eth.subscribe(\"newBlockHeaders\",(error,result) => {\n      if(result){\n        this.setState({blockNumber: result.number})\n        //console.log(result)\n      } else {\n        console.log(error)\n      }\n    })\n  }\n\n  handleClickAccount = () => {\n    navigator.clipboard.writeText(this.state.accounts[0])\n    alert(this.state.accounts[0] + \" copied to clipboard!\")\n  }\n\n  handlePrivateKey = () => {\n    const container = document.getElementById(\"privateKeyContainer\")\n    // Hardcoded private and public keys for free usage in the Rinkeby network\n    let priK = \"9bf64bc7afe3388dcdcbf414369fd612722f5cd313832166edb5bca8dc4c82f0\"\n    let pubK = \"0x986a64A38778011d371e5fBEc7A01683385ae84E\"\n    let html = \"This private keys are for testing porposes, do not use them outside testing blockchains!<br>\"\n    html += \"Click the private or public key to copy to clipboard.<br><br>\"\n    html += `<a onclick=\"navigator.clipboard.writeText('${priK}');alert('Private key copied to clipboard');\"><u>Private Keys:</u> ${priK}</a><br>`\n    html += `<a onclick=\"navigator.clipboard.writeText('${pubK}');alert('Public key copied to clipboard');\"><u>Address:</u> ${pubK}</a> `\n    container.innerHTML = html\n  }\n  \n  // https://docs.metamask.io/guide/rpc-api.html#unrestricted-methods\n  // https://docs.metamask.io/guide/registering-your-token.html#code-free-example\n  addTokenToMetamask = async () => {\n    //console.log(this.state.tokenAddress)\n    //console.table(window.ethereum)\n    try {\n   \n      const wasAdded = await window.ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20', // Initially only supports ERC20, but eventually more!\n          options: {\n            address: this.state.tokenAddress, // The address that the token is at.\n            symbol: this.state.tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n            decimals: this.state.tokenDecimals, // The number of decimals in the token\n            image: 'https://bafybeifkkdtuyjs34bnujrqassvo6q3okwncahwfzbpqglhctypaamnuse.ipfs.infura-ipfs.io/?w=248&fit=crop&auto=format', // A string url of the token logo\n          },\n        },\n      });\n\n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n\n  // https://docs.metamask.io/guide/rpc-api.html#unrestricted-methods\n  // https://docs.metamask.io/guide/ethereum-provider.html#methods\n  // https://www.youtube.com/watch?v=QTcuJ9rdqME\n  handleSetChain = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: '0x4'\n        }],\n      });\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  handleBlockColor() {\n    let blockDisplay = document.getElementById(\"blockDisplay\")\n\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return ( <div className=\"App\">\n                <div className=\"header\">\n                  <div className=\"header-right\">\n                    <a onClick={this.handleSetChain}><u>Select Rinkeby</u></a>\n                    <a >Tokens</a>\n                    <a >Balance</a>\n                    <a >Account</a>\n                  </div>\n                </div>\n                <br></br>Loading Web3, accounts, and contract...<br></br>\n                <img src={logo} className=\"App-logo, rotate\" alt=\"logo\" />\n                <br></br>Connect to Rinkeby, this project smart contracts are deployed there.<br></br>\n              </div>\n      )\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n        <a className=\"logo\">{this.state.tokenName}</a>\n          <div className=\"header-right\">\n            <a href=\"https://rinkeby.etherscan.io/\" target=\"_blank\">Rinkeby</a>\n            <a onClick={this.addTokenToMetamask}>{this.state.userTokens} {this.state.tokenSymbol} <img src={logo} className=\"smallLogoHeader\"/></a>\n            <a >{Math.round(this.state.balance*1e-16)/100} ETH</a>\n            <a onClick={this.handleClickAccount}>{this.state.accounts[0].substr(0,6)+\"...\"+this.state.accounts[0].substr(-4)}</a>\n          </div>\n        </div>\n\n        <h1>{this.state.tokenName} token sale!</h1>\n        <p>Mint your tokens today at rate of {this.state.rate} token per wei!</p>\n        <h1>Total Supply: {this.state.totalSupply} <img src={logo} className=\"smallLogo\"/></h1>\n        <br></br>\n        <h2>KYC whitelisting</h2>\n        <p>Only the owner can add accounts to the whitelist: </p>\n        <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange}/>\n        <a className=\"button\" onClick={this.handleKycWhitelisting}>Add to whitelist</a>\n        <p>Are you the KYC smart contract owner? {this.state.owner ? \"YES\" : \"NO\"}</p>\n        <p>Is you account whitelisted? {this.state.whitelisted ? \"YES\" : \"NO\"}</p>\n        <br></br>\n\n        <h2>Buy {this.state.tokenName} {this.state.tokenSymbol} tokens</h2>\n        <p>If you are whitelisted you can buy tokens by sending wei to the crowdsale smart contract:</p>\n        <p>{this.state.tokenSaleAddress}</p>\n        <p>Or</p>\n        <p>Amounts of tokens to buy: <input id=\"weiAmount\" type=\"number\" min=\"0\" value=\"1\"/>\n        <a className=\"button\" onClick={this.handleBuyTokens}>Buy tokens</a></p>\n        <br></br>\n        <h2 >Need Rinkeby test ETH? Try <a href=\"https://faucets.chain.link/rinkeby\" target=\"_blank\"><u>Chainlink's faucet</u></a></h2>\n        \n        <h2 id=\"privateKeyContainer\" onClick={this.handlePrivateKey}>In case you need an already<br></br>\n        whitelisted account, click <u>here</u></h2>\n        <br></br>\n        <br></br>\n        <div id=\"blockDisplay\" className=\"blockDisplay\"><a href={\"https://rinkeby.etherscan.io/block/\"+this.state.blockNumber} target=\"_blank\">Block N° {this.state.blockNumber}</a></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/testtoken.9ca8c8d8.png\";"],"sourceRoot":""}